import java.util.*;
import java.lang.*;

class Solution {

    void simpleCalculator(double num1, char c, double num2) {
        double result = 0; // declaring 0 to avoid intialization eror
        switch (c) {
            case '+':
                result = num1 + num2;
                System.out.println(result);
                break;
            case '-':
                result = num1 - num2;
                System.out.println(result);
                break;
            case '*':
                result = num1 * num2;
                break;
            case '/':
                if (num2 != 0) {
                    result = num1 / num2;
                    System.out.println(result);
                } else {
                    System.out.println("Cannot divide by zero. Please enter a non-zero divisor.");
                }
                break;
            default:
                System.out.println("Invalid operator. Please enter a valid operator.");
        }

    }

    void poly(int a, int b, int c) {
        // quadratic equation (degree = 2)
        System.out.println("---------------------------------------------");

        double b2sq = Math.pow(b, 2);
        System.out
                .println("x1  = " + (b * (-1) + Math.pow(b2sq - 4 * a * c, 0.5)) / (2 * a));
        System.out
                .println("x2  = " + (b * (-1) - Math.pow(b2sq - 4 * a * c, 0.5)) / (2 * a));
        System.out.println("---------------------------------------------");
    }

    void poly(int a, int b, int c, int d) {
        // cubic equation (degree = 3)
        System.out.println("---------------------------------------------");

        int root3 = 0;
        int mult3 = Math.abs(a * d);

        if ((a * Math.pow(0, 3)) + (b * Math.pow(0, 2)) + (c * Math.pow(0, 1)) + d == 0) {
            System.out.println("x = " + 0);
            root3++;
        }

        for (int p = 1; p <= mult3; p++) {
            if ((a * Math.pow(-p, 3)) + (b * Math.pow(-p, 2)) + c * (-p) + d == 0) {
                System.out.println("x = -" + p);
                root3++;
            }
            if ((a * Math.pow(p, 3)) + (b * Math.pow(p, 2)) + (c * Math.pow(p, 1)) + d == 0) {
                System.out.println("x = " + p);
                root3++;
            }
        }
        if (root3 == 0) {
            System.out.println("No real roots");
        }

        System.out.println("---------------------------------------------");
    }

    void poly(int a, int b, int c, int d, int e) {
        // quartic equation (degree = 4)
        System.out.println("---------------------------------------------");

        int root4 = 0;
        int mult4 = Math.abs(a * e);

        for (int p = 0; p <= mult4; p++) {
            if ((a * Math.pow(-p, 4)) + (b * Math.pow(-p, 3))
                    + (c * Math.pow(-p, 2)) + (d * Math.pow(-p, 1)) + e == 0) {
                System.out.println("x = -" + p);
                root4++;
            }
            if ((a * Math.pow(p, 4)) + (b * Math.pow(p, 3))
                    + (c * Math.pow(p, 2)) + (d * Math.pow(p, 1)) + e == 0) {
                System.out.println("x = " + p);
                root4++;
            }
            System.out.println(root4);
        }
        if (root4 == 0) {
            System.out.println("No real roots");
        }
        System.out.println("---------------------------------------------");
    }

    void Logarithmic(double value) {
        if (value > 0) {
            double result = Math.log(value);
            System.out.println("Natural logarithm of " + value + " is: " + result);
        } else {
            System.out.println("Logarithm is undefined for non-positive values.");
        }
    }

    void Trigonometric(int trigChoice, double angle) {
        double result = 0;

        switch (trigChoice) {
            case 1:
                result = Math.sin(Math.toRadians(angle));
                System.out.println(result);
                break;
            case 2:
                result = Math.cos(Math.toRadians(angle));
                System.out.println(result);
                break;
            case 3:
                result = Math.tan(Math.toRadians(angle));
                System.out.println(result);
                break;
            case 4:
                result = 1 / Math.sin(Math.toRadians(angle));
                System.out.println(result);
                break;
            case 5:
                result = 1 / Math.cos(Math.toRadians(angle));
                System.out.println(result);
                break;
            case 6:
                result = 1 / Math.tan(Math.toRadians(angle));
                System.out.println(result);
                break;
            default:
                System.out.println("Invalid choice. Please enter a valid trigonometric function.");
        }

    }

    long calculateFactorial(int n) {
        // using reccursion
        if (n == 0 || n == 1) {
            return 1;
        } else {
            return n * calculateFactorial(n - 1);
        }
    }

    void Factorial(int value) {
        if (value >= 0) {
            long result = calculateFactorial(value);
            System.out.println("Factorial of " + value + " is: " + result);
        } else {
            System.out.println("Factorial is undefined for negative integers.");
        }
    }

    void APSum(int firstTerm, int commonDifference, int numberOfTerms) {
        int apSum = (numberOfTerms * (2 * firstTerm + (numberOfTerms - 1) * commonDifference)) / 2;
        System.out.println("Sum of the Arithmetic Progression is: " + apSum);
    }

    void GP(double firstTerm, double commonRatio, int numberOfTerms) {
        if (commonRatio == 1) {
            // (infinite sum)
            System.out.println("Sum of the Geometric Progression is infinite.");
        } else {
            double gpSum = firstTerm * (Math.pow(commonRatio, numberOfTerms) - 1) / (commonRatio - 1);
            System.out.println("Sum of the Geometric Progression is: " + gpSum);
        }
    }

}

class PolynomialS {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Solution solv = new Solution();

        while (true) {
            System.out.println("---------------------------------------------");
            System.out.println("                MAIN MENU");
            System.out.println("---------------------------------------------");
            System.out.println("Press 1 to enter a Simple Calculator");
            System.out.println("Press 2 to enter a quadratic equation (degree = 2)");
            System.out.println("Press 3 to enter a cubic equation (degree = 3)");
            System.out.println("Press 4 to enter a quartic equation (degree = 4)");
            System.out.println("Press 5 for Logarithm");
            System.out.println("Press 6 for Trigonometric Calculations");
            System.out.println("Press 7 for Factorial");
            System.out.println("Press 8 for Power Function");
            System.out.println("Press 9 for Arithmetic Progression (Sum)");
            System.out.println("Press 10 for Geometric Progression (Product)");

            System.out.println("Press 0 to exit");

            System.out.print("Your choice: ");
            int polyChoice = sc.nextInt();
            System.out.println();
            System.out.println("---------------------------------------------");
            System.out.println();

            if (polyChoice == 0) {
                System.out.println("Exiting the program. Goodbye!");
                System.out.println();
                System.out.println("---------------------------------------------");
                System.exit(0);

                break;
            }

            switch (polyChoice) {

                case 1:
                    System.out.print("Enter an equation (num1 operator num2): ");
                    System.out.print("Enter num1 : ");
                    double num1 = sc.nextDouble();

                    System.out.print("Enter operator (+, -, *, /) : ");
                    char operator = sc.next().charAt(0);

                    System.out.print("Enter num2 : ");
                    double num2 = sc.nextDouble();

                    solv.simpleCalculator(num1, operator, num2);

                    break;

                case 2:
                    System.out.println("Equation: a * x^2 + b * x + c");
                    System.out.print("a = ");
                    int a2 = sc.nextInt();
                    System.out.print("b = ");
                    int b2 = sc.nextInt();
                    System.out.print("c = ");
                    int c2 = sc.nextInt();

                    solv.poly(a2, b2, c2);

                    break;

                case 3:

                    System.out.println("Equation: a * x^3 + b * x^2 + c * x + d");
                    System.out.print("a = ");
                    int a3 = sc.nextInt();
                    System.out.print("b = ");
                    int b3 = sc.nextInt();
                    System.out.print("c = ");
                    int c3 = sc.nextInt();
                    System.out.print("d = ");
                    int d3 = sc.nextInt();

                    solv.poly(a3, b3, c3, d3);

                    break;

                case 4:

                    System.out.println("Equation: a * x^4 + b * x^3 + c * x^2 + d * x + e");
                    System.out.print("a = ");
                    int a4 = sc.nextInt();
                    System.out.print("b = ");
                    int b4 = sc.nextInt();
                    System.out.print("c = ");
                    int c4 = sc.nextInt();
                    System.out.print("d = ");
                    int d4 = sc.nextInt();
                    System.out.print("e = ");
                    int e4 = sc.nextInt();

                    solv.poly(a4, b4, c4, d4, e4);

                    break;

                case 5:

                    System.out.print("Enter a value: ");
                    double inputValue = sc.nextDouble();
                    solv.Logarithmic(inputValue);

                    break;

                case 6:

                    System.out.println("Trigonometric Calculations Menu:");
                    System.out.println("1. Sine");
                    System.out.println("2. Cosine");
                    System.out.println("3. Tangent");
                    System.out.println("4. Cosecant");
                    System.out.println("5. Secant");
                    System.out.println("6. Cotangent");

                    System.out.print("Enter your choice (1-6): ");
                    int trigChoice = sc.nextInt();

                    System.out.print("Enter the angle in degrees: ");
                    double angle = sc.nextDouble();
                    solv.Trigonometric(trigChoice, angle);
                    break;

                case 7:

                    System.out.print("Enter a non-negative integer: ");
                    int input = sc.nextInt();
                    solv.Factorial(input);
                    break;

                case 8:

                    System.out.print("Enter the base: ");
                    double base = sc.nextDouble();

                    System.out.print("Enter the exponent: ");
                    int exponent = sc.nextInt();
                    System.out.println(Math.pow(base, exponent));

                    break;

                case 9:
                    System.out.print("Enter the first term (a): ");
                    int firstTerm = sc.nextInt();

                    System.out.print("Enter the common difference (d): ");
                    int commonDifference = sc.nextInt();

                    System.out.print("Enter the number of terms (n): ");
                    int numberOfTerms = sc.nextInt();
                    solv.APSum(firstTerm, commonDifference, numberOfTerms);

                    break;

                case 10:

                    System.out.print("Enter the first term (a): ");
                    double firstTermGP = sc.nextDouble();

                    System.out.print("Enter the common ratio (r): ");
                    double commonRatioGP = sc.nextDouble();

                    System.out.print("Enter the number of terms (n): ");
                    int numberOfTermsGP = sc.nextInt();

                    solv.GP(firstTermGP, commonRatioGP, numberOfTermsGP);

                    break;

                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
            }
        }

        sc.close();
    }
}
