import java.util.*;

class completeRestaurantArray {
    Scanner scanner = new Scanner(System.in);
    Restaurant rs = new Restaurant();

    static Restaurant[] allRestaurants = new Restaurant[0];

    void arrayIncrease() {
        Restaurant[] newArray = new Restaurant[allRestaurants.length + 1];
        for (int i = 0; i < allRestaurants.length; i++) {
            newArray[i] = allRestaurants[i];
        }

        allRestaurants = newArray;
        // This code increases the length of the array by 1
    }

    void addRestaurant() {
        arrayIncrease();

        allRestaurants[allRestaurants.length - 1] = rs.RestaurantInput();
    }

    void printAllRestaurants() {
        if (allRestaurants.length == 0) {
            System.out.println("Currently, no restaurants available.");
        } else {
            System.out.println("All Restaurants:");
            for (int i = 0; i < allRestaurants.length; i++) {
                Restaurant restaurant = allRestaurants[i];
                System.out.println("------------------------------");
                System.out.println("Restaurant " + (i + 1) + ":");
                System.out.println("Restaurant Name : " + restaurant.name);
                System.out.println("Address : " + restaurant.address);
                System.out.println("Theme : " + restaurant.theme);
                System.out.println("Average Stars : " + (restaurant.noOfStars / restaurant.noOfReviews));
            }
        }
    }

    void printRestaurantMenu(int i) {
        i--;// Since Zero Indexing
        if (allRestaurants[i].dishArray.length == 0) {
            System.out.println("No dishes in the menu for this restaurant.");
        } else {
            System.out.println("Dishes in the Menu:");
            for (int j = 0; j < allRestaurants[i].dishArray.length; j++) {
                System.out.println("Dish " + (j + 1) + ":");
                allRestaurants[i].dishArray[j].dishPrint();
                System.out.println("------------------------------");
            }
        }
    }

    void restaurantReview() {
        if (allRestaurants.length == 0) {

        } else {
            System.out.println("Choose a restaurant (1 to " + allRestaurants.length + "): ");
            int restaurantChoice = scanner.nextInt();
            int i = restaurantChoice - 1;
            while (true) {

                System.out.println("Enter star rating (0 to 5): ");
                int starRating = scanner.nextInt();

                if (starRating >= 0 && starRating <= 5) {

                    Restaurant chosenRestaurant = allRestaurants[i];
                    chosenRestaurant.noOfStars += starRating;
                    chosenRestaurant.noOfReviews++;
                    System.out.println("New Average Stars for " + chosenRestaurant.name + ": "
                            + chosenRestaurant.noOfStars / chosenRestaurant.noOfReviews);

                    break;
                } else {
                    System.out.println("Invalid star rating. Please enter a rating between 0 and 5.");
                }
            }
        }
    }

}

class Dish {
    Scanner scanner = new Scanner(System.in);

    String name;
    String category;
    String cuisine;
    int price;
    int timeOfPreparation;

    Dish dishInput() {

        System.out.print("Enter the dish name : ");
        this.name = scanner.nextLine();

        dishCategory();

        dishCuisine();

        System.out.print("Enter the price : ");
        this.price = scanner.nextInt();
        scanner.nextLine();

        System.out.print("Enter the time of preparation (in minutes) : ");
        this.timeOfPreparation = scanner.nextInt();
        scanner.nextLine();

        return this;
    }

    void dishCategory() {
        System.out.println("Choose category (1-5):\n1. Starter\n2. Snack\n3. Main Meal\n4. Dessert\n5. Miscellaneous");
        int choice = scanner.nextInt();

        switch (choice) {
            case 1:
                this.category = "Starter";
                break;
            case 2:
                this.category = "Snack";
                break;
            case 3:
                this.category = "Main Meal";
                break;
            case 4:
                this.category = "Dessert";
                break;
            case 5:
                this.category = "Miscellaneous";
                break;
            default:
                System.out.println("Invalid choice. Setting category to Miscellaneous.");
                this.category = "Miscellaneous";
        }

    }

    void dishCuisine() {
        System.out.println(
                "Choose cuisine:\n1. Indian\n2. Italian\n3. Gujarati\n4. Mexican\n5. South Indian\n6. Continental\n7. Punjabi");
        int choice = scanner.nextInt();

        switch (choice) {
            case 1:
                this.cuisine = "Indian";
                break;
            case 2:
                this.cuisine = "Italian";
                break;
            case 3:
                this.cuisine = "Gujarati";
                break;
            case 4:
                this.cuisine = "Mexican";
                break;
            case 5:
                this.cuisine = "South Indian";
                break;
            case 6:
                this.cuisine = "Continental";
                break;
            case 7:
                this.cuisine = "Punjabi";
                break;
            default:
                System.out.println("Invalid choice. Setting cuisine to Indian.");
                this.cuisine = "Indian";
        }
    }

    void dishPrint() {
        System.out.println("Dish Name : " + this.name);
        System.out.println("Category : " + this.category);
        System.out.println("Cuisine : " + this.cuisine);
        System.out.println("Price : " + this.price);
        System.out.println("Time of Preparation : " + this.timeOfPreparation + " minutes");
    }
}

class Restaurant {
    Scanner scanner = new Scanner(System.in);
    Dish ds = new Dish();

    String name;
    String address;
    String theme;
    int noOfStars;
    int noOfReviews;
    Dish[] dishArray;

    Restaurant RestaurantInput() {

        System.out.print("Enter the Restaurant Name : ");
        this.name = scanner.nextLine();

        System.out.print("Enter the Restaurant Address : ");
        this.address = scanner.nextLine();

        restaurantTheme();

        System.out.print("Enter the Number of Stars : ");
        this.noOfStars = scanner.nextInt();

        System.out.print("Enter the Number of Reviews : ");
        this.noOfReviews = scanner.nextInt();
        scanner.nextLine();

        addToDishArray();

        return this;
    }

    void restaurantTheme() {
        System.out.println("Choose theme:\n1. Fast Food\n2. Dine In\n3. Food Truck\n4. Cafe\n5. Fine Dining");
        int choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
            case 1:
                this.theme = "Fast Food";
                break;
            case 2:
                this.theme = "Dine In";
                break;
            case 3:
                this.theme = "Food Truck";
                break;
            case 4:
                this.theme = "Cafe";
                break;
            case 5:
                this.theme = "Fine Dining";
                break;
            default:
                System.out.println("Invalid choice. Setting theme to Fast Food.");
                this.theme = "Fast Food";

        }
    }

    void addToDishArray() {

        System.out.print("Enter the Number of Dishes : ");
        int numDishes = scanner.nextInt();
        scanner.nextLine();

        this.dishArray = new Dish[numDishes];
        // Creates an array of Dish objects with a capacity of n

        for (int i = 0; i < numDishes; i++) {
            System.out.println("Enter details for Dish " + (i + 1) + " : ");
            System.out.println("------------------------------");

            this.dishArray[i] = ds.dishInput();
        }
    }

    void printDishArray() {
        if (dishArray.length == 0) {
            System.out.println("This Restraunt isn't serving.");
        } else {
            System.out.println("Dishes in the Restaurant : " + this.name);
            System.out.println();
            for (int i = 0; i < dishArray.length; i++) {
                System.out.println("Dish " + (i + 1) + " : ");
                this.dishArray[i].dishPrint(); // Using dishPrint method from Dish class
                System.out.println("------------------------------");
            }
        }
    }

}

class ProductManager {
    Scanner scanner = new Scanner(System.in);
    Login log = new Login();
    completeRestaurantArray cra = new completeRestaurantArray();

    void managerMenu() {
        int choice;

        do {

            System.out.println("============================================");
            System.out.println("Manager Menu : ");
            System.out.println("1. Add Restaurant");
            System.out.println("2. Add Dishes");
            System.out.println("3. Delete Restaurant");
            System.out.println("4. Delete Dishes");
            System.out.println("5. Change Password");
            System.out.println("6. Exit to Login Page");

            System.out.print("Enter your choice : ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    cra.addRestaurant();
                    break;
                case 2:

                    break;
                case 3:
                    deleteRestaurant();
                    break;
                case 4:
                    deleteRestaurantDishes();
                    break;
                case 5:
                    log.changeProductManagerPassword();
                    break;
                case 6:
                    System.out.println("Exiting the Manager Menu. Goodbye!");
                    log.logInPage();
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }

        } while (choice != 5);

        scanner.close();
    }

    void deleteRestaurant() {
        // Delete restaurant logic
        System.out.println("Deleting a restaurant...");
    }

    void deleteRestaurantDishes() {
        // Delete restrauntFoodMenu logic
        System.out.println("Deleting restrauntFoodMenu from a restaurant...");
    }

}

class FoodCritic {
    Scanner scanner = new Scanner(System.in);
    Login log = new Login();
    completeRestaurantArray cra = new completeRestaurantArray();

    void reviewRestraunt() {
        cra.printAllRestaurants();
        // printing restraunt list
        cra.restaurantReview();

    }

    void criticMenu() {
        int choice;

        do {
            System.out.println("============================================");
            System.out.println("Food Critic Menu:");
            System.out.println("1. View Restaurants");
            System.out.println("2. Review Restaurants");
            System.out.println("3. Change Password");
            System.out.println("4. Exit to Login Page");

            System.out.print("Enter your choice : ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    cra.printAllRestaurants();
                    System.out.println("------------------------------");
                    break;
                case 2:
                    reviewRestraunt();
                    System.out.println("------------------------------");
                    break;
                case 3:
                    log.changeFoodCriticPassword();
                    break;
                case 4:
                    System.out.println("Exiting the Critic Menu. Goodbye!");
                    log.logInPage();
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }

        } while (choice != 3);

        scanner.close();
    }
}

class Customer {

    Scanner scanner = new Scanner(System.in);
    Dish ds = new Dish();
    Restaurant rs = new Restaurant();
    Login log = new Login();
    completeRestaurantArray cra = new completeRestaurantArray();

    static int balance = 5000;
    Dish[] previousOrders = new Dish[0];

    void increasePreviousOrders() {
        Dish[] newArray = new Dish[previousOrders.length + 1];
        for (int i = 0; i < previousOrders.length; i++) {
            newArray[i] = previousOrders[i];
        }
        previousOrders = newArray;
    }

    void customerMenu() {
        int mainChoice;

        do {

            System.out.println();
            System.out.println("Customer Menu:");
            System.out.println("1. Order Food");
            System.out.println("2. Balance");
            System.out.println("3. View Previous Orders");
            System.out.println("4. Change Password");
            System.out.println("5. Exit to Login Page");

            System.out.print("Enter your choice: ");
            mainChoice = scanner.nextInt();

            System.out.println();

            switch (mainChoice) {
                case 1:
                    orderFood();
                    System.out.println();
                    System.out.println("------------------------------");
                    System.out.println();
                    break;
                case 2:
                    balanceSubMenu();
                    System.out.println();
                    System.out.println("------------------------------");
                    System.out.println();
                    break;
                case 3:
                    System.out.println();
                    viewPreviousOrders();
                    System.out.println();
                    break;
                case 4:
                    log.changeCustomerPassword();
                    break;
                case 5:
                    System.out.println();
                    System.out.println("Exiting the Customer Menu. Goodbye!");
                    System.out.println();
                    System.out.println("------------------------------");
                    log.logInPage();
                    break;
                default:
                    System.out.println();
                    System.out.println("Invalid choice. Please try again.");
                    System.out.println("------------------------------");
                    System.out.println();
            }
        } while (mainChoice != 4);

    }

    void orderFood() {
        cra.printAllRestaurants();

        if (cra.allRestaurants.length == 0) {
        } else {
            System.out.println("Choose a restaurant (1 to " + cra.allRestaurants.length + ") : ");
            int restaurantChoice = scanner.nextInt();
            int i = restaurantChoice - 1;
            if (i >= 0 && i < cra.allRestaurants.length) {
                cra.printRestaurantMenu(restaurantChoice);

                System.out.println();
                System.out.println("------------------------------");
                System.out.println();

                System.out.println("Choose a dish (1 to " + cra.allRestaurants[i].dishArray.length + ") : ");
                int dishChoice = scanner.nextInt();

                if (dishChoice >= 1 && dishChoice <= cra.allRestaurants[i].dishArray.length) {

                    Dish chosenDish = cra.allRestaurants[i].dishArray[dishChoice - 1];

                    System.out.println("You have selected: " + chosenDish.name);
                    System.out.println("Price: " + chosenDish.price);

                } else {
                    System.out.println("Invalid dish choice. Please try again.");
                }
            } else {
                System.out.println("Invalid restaurant choice. Please try again.");
            }
        }
    }

    void balanceSubMenu() {
        int balanceChoice;
        do {
            System.out.println("------------------------------");
            System.out.println();
            System.out.println("Balance Submenu:");
            System.out.println("1. View Balance");
            System.out.println("2. Deposit Money");
            System.out.println("3. Back to Main Menu");

            System.out.print("Enter your choice: ");
            balanceChoice = scanner.nextInt();

            switch (balanceChoice) {
                case 1:
                    System.out.println("Balance : " + balance);
                    System.out.println("------------------------------");
                    System.out.println();
                    break;
                case 2:
                    depositMoney();
                    System.out.println("------------------------------");
                    System.out.println();
                    break;
                case 3:
                    System.out.println("------------------------------");
                    System.out.println();
                    return; // Back to the Customer menu
                default:
                    System.out.println("Invalid choice. Please try again.");
                    System.out.println("------------------------------");
                    System.out.println();
            }
        } while (balanceChoice != 3);
    }

    void depositMoney() {
        System.out.print("Enter Deposit Amount : ");
        balance += scanner.nextInt();
        System.out.println("New Balance : " + balance);

    }

    void viewPreviousOrders() {
        // View previous orders logic
    }

}

class Login {
    Scanner scanner = new Scanner(System.in);

    String productManagerPassword = "Pass1";
    String foodCriticPassword = "Pass2";
    String customerPassword = "Pass3";

    void logInPage() {

        int maxAttempts = 3;
        int currentAttempt = 0;

        System.out.println("============================================");
        System.out.println("Welcome to the Login Page!");

        while (currentAttempt < maxAttempts) {

            System.out.print("Enter your ID: ");
            String userId = scanner.nextLine();

            System.out.print("Enter your password: ");
            String password = scanner.nextLine();

            if (userId.equalsIgnoreCase("ProductManager") && password.equals(productManagerPassword)) {
                System.out.println("Successful Login");
                System.out.println("Welcome Manager!");
                System.out.println("============================================");
                ProductManager PM = new ProductManager();
                PM.managerMenu();
                break;

            } else if (userId.equalsIgnoreCase("FoodCritic") && password.equals(foodCriticPassword)) {
                System.out.println("Successful Login");
                System.out.println("Welcome Food Critic!");
                System.out.println("============================================");
                FoodCritic FC = new FoodCritic();
                FC.criticMenu();
                break;

            } else if (userId.equalsIgnoreCase("Customer") && password.equals(customerPassword)) {
                System.out.println("Successful Login");
                System.out.println("Welcome Customer!");
                System.out.println("============================================");

                Customer CM = new Customer();
                CM.customerMenu();
                break;

            } else {
                System.out.println("Invalid credentials. Please try again.");
                currentAttempt++;

            }

        }

        if (currentAttempt == maxAttempts) {
            System.out.println("Maximum attempts reached. \n Your account is locked for 24 hour");
            System.exit(0);
        }

    }

    void changeProductManagerPassword() {

        System.out.print("Enter current password for Product Manager: ");
        String currentPassword = scanner.nextLine();

        if (currentPassword.equals(productManagerPassword)) {
            System.out.print("Enter new password for Product Manager: ");
            String newPassword = scanner.nextLine();
            productManagerPassword = newPassword;
            System.out.println("Password Change Successful!");
            logInPage();
        } else {

            ProductManager PM = new ProductManager();
            PM.managerMenu();
            System.out.println("Incorrect current password. Password not changed.");
        }
    }

    void changeFoodCriticPassword() {
        System.out.print("Enter current password for Food Critic: ");
        String currentPassword = scanner.nextLine();

        if (currentPassword.equals(foodCriticPassword)) {
            System.out.print("Enter new password for Food Critic: ");
            String newPassword = scanner.nextLine();
            foodCriticPassword = newPassword;
            System.out.println("Password Change Successful!");
            logInPage();
        } else {
            System.out.println("Incorrect current password. Password not changed.");
            FoodCritic FC = new FoodCritic();
            FC.criticMenu();
        }
    }

    void changeCustomerPassword() {
        System.out.print("Enter current password for Customer: ");
        String currentPassword = scanner.nextLine();

        if (currentPassword.equals(customerPassword)) {
            System.out.print("Enter new password for Customer: ");
            String newPassword = scanner.nextLine();
            customerPassword = newPassword;
            System.out.println("Password Change Successful!");
            logInPage();
        } else {
            Customer CM = new Customer();
            System.out.println("Incorrect current password. Password not changed.");
            CM.customerMenu();

        }
    }

}

class Hotel {

    public static void main(String[] args) {
        // In this program there is no way to close the progrem, as in real life use f
        // someone closes the program all data would be lost
        // Which is not Ideal
        Scanner scanner = new Scanner(System.in);
        Login log = new Login();

        // logging in
        log.logInPage();
    }
}
